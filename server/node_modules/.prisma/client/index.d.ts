import {
  DMMF,
  DMMFClass,
  Engine,
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  sqltag as sql,
  empty,
  join,
  raw,
  Sql,
  Decimal,
} from '@prisma/client/runtime';

export { PrismaClientKnownRequestError }
export { PrismaClientUnknownRequestError }
export { PrismaClientRustPanicError }
export { PrismaClientInitializationError }
export { PrismaClientValidationError }
export { Decimal }

/**
 * Re-export of sql-template-tag
 */
export { sql, empty, join, raw, Sql }

/**
 * Prisma Client JS version: 2.10.1
 * Query Engine version: 7d0087eadc7265e12d4b8d8c3516b02c4c965111
 */
export declare type PrismaVersion = {
  client: string
}

export declare const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export declare type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export declare interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export declare type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export declare type InputJsonObject = {[Key in string]?: JsonValue}
 
export declare interface InputJsonArray extends Array<JsonValue> {}
 
export declare type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray

declare type SelectAndInclude = {
  select: any
  include: any
}

declare type HasSelect = {
  select: any
}

declare type HasInclude = {
  include: any
}

declare type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export declare type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export declare type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export declare type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export declare type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export declare type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export declare type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};
declare class PrismaClientFetcher {
  private readonly prisma;
  private readonly debug;
  private readonly hooks?;
  constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
  request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
  sanitizeMessage(message: string): string;
  protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
}


/**
 * Client
**/

export declare type Datasource = {
  url?: string
}

export type Datasources = {
  db?: Datasource
}

export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your prisma.schema file
   */
  datasources?: Datasources

  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat

  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: Array<LogLevel | LogDefinition>
}

export type Hooks = {
  beforeRequest?: (options: {query: string, path: string[], rootField?: string, typeName?: string, document: any}) => any
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
  GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
  : never

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findOne'
  | 'findMany'
  | 'findFirst'
  | 'create'
  | 'update'
  | 'updateMany'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'

/**
 * These options are being passed in to the middleware as "params"
 */
export type MiddlewareParams = {
  model?: string
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => Promise<T>,
) => Promise<T>

// tested in getLogLevel.test.ts
export declare function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export declare class PrismaClient<
  T extends PrismaClientOptions = PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<LogLevel | LogDefinition> ? GetEvents<T['log']> : never : never
> {
  /**
   * @private
   */
  private fetcher;
  /**
   * @private
   */
  private readonly dmmf;
  /**
   * @private
   */
  private connectionPromise?;
  /**
   * @private
   */
  private disconnectionPromise?;
  /**
   * @private
   */
  private readonly engineConfig;
  /**
   * @private
   */
  private readonly measurePerformance;
  /**
   * @private
   */
  private engine: Engine;
  /**
   * @private
   */
  private errorFormat: ErrorFormat;

  /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */
  constructor(optionsArg?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * @deprecated renamed to `$on`
   */
  on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * Connect with the database
   */
  $connect(): Promise<void>;
  /**
   * @deprecated renamed to `$connect`
   */
  connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;
  /**
   * @deprecated renamed to `$disconnect`
   */
  disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw<T = any>(query: string | TemplateStringsArray | Sql, ...values: any[]): Promise<number>;

  /**
   * @deprecated renamed to `$executeRaw`
   */
  executeRaw<T = any>(query: string | TemplateStringsArray | Sql, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw<T = any>(query: string | TemplateStringsArray | Sql, ...values: any[]): Promise<T>;
 
  /**
   * @deprecated renamed to `$queryRaw`
   */
  queryRaw<T = any>(query: string | TemplateStringsArray | Sql, ...values: any[]): Promise<T>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): UserDelegate;

  /**
   * `prisma.chatRoomUser`: Exposes CRUD operations for the **ChatRoomUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatRoomUsers
    * const chatRoomUsers = await prisma.chatRoomUser.findMany()
    * ```
    */
  get chatRoomUser(): ChatRoomUserDelegate;

  /**
   * `prisma.chatRoom`: Exposes CRUD operations for the **ChatRoom** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatRooms
    * const chatRooms = await prisma.chatRoom.findMany()
    * ```
    */
  get chatRoom(): ChatRoomDelegate;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): MessageDelegate;
}



/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export declare const UserDistinctFieldEnum: {
  id: 'id',
  name: 'name',
  imageUri: 'imageUri',
  status: 'status'
};

export declare type UserDistinctFieldEnum = (typeof UserDistinctFieldEnum)[keyof typeof UserDistinctFieldEnum]


export declare const ChatRoomUserDistinctFieldEnum: {
  id: 'id',
  userID: 'userID',
  chatRoomID: 'chatRoomID'
};

export declare type ChatRoomUserDistinctFieldEnum = (typeof ChatRoomUserDistinctFieldEnum)[keyof typeof ChatRoomUserDistinctFieldEnum]


export declare const ChatRoomDistinctFieldEnum: {
  id: 'id',
  lastMessageID: 'lastMessageID'
};

export declare type ChatRoomDistinctFieldEnum = (typeof ChatRoomDistinctFieldEnum)[keyof typeof ChatRoomDistinctFieldEnum]


export declare const MessageDistinctFieldEnum: {
  id: 'id',
  userID: 'userID',
  content: 'content',
  createdAt: 'createdAt',
  chatRoomID: 'chatRoomID'
};

export declare type MessageDistinctFieldEnum = (typeof MessageDistinctFieldEnum)[keyof typeof MessageDistinctFieldEnum]


export declare const SortOrder: {
  asc: 'asc',
  desc: 'desc'
};

export declare type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]



/**
 * Model User
 */

export type User = {
  id: number
  name: string
  imageUri: string
  status: string
}


export type AggregateUser = {
  count: number
  avg: UserAvgAggregateOutputType | null
  sum: UserSumAggregateOutputType | null
  min: UserMinAggregateOutputType | null
  max: UserMaxAggregateOutputType | null
}

export type UserAvgAggregateOutputType = {
  id: number
}

export type UserSumAggregateOutputType = {
  id: number
}

export type UserMinAggregateOutputType = {
  id: number
}

export type UserMaxAggregateOutputType = {
  id: number
}


export type UserAvgAggregateInputType = {
  id?: true
}

export type UserSumAggregateInputType = {
  id?: true
}

export type UserMinAggregateInputType = {
  id?: true
}

export type UserMaxAggregateInputType = {
  id?: true
}

export type AggregateUserArgs = {
  where?: UserWhereInput
  orderBy?: Enumerable<UserOrderByInput> | UserOrderByInput
  cursor?: UserWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<UserDistinctFieldEnum>
  count?: true
  avg?: UserAvgAggregateInputType
  sum?: UserSumAggregateInputType
  min?: UserMinAggregateInputType
  max?: UserMaxAggregateInputType
}

export type GetUserAggregateType<T extends AggregateUserArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetUserAggregateScalarType<T[P]>
}

export type GetUserAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof UserAvgAggregateOutputType ? UserAvgAggregateOutputType[P] : never
}
    
    

export type UserSelect = {
  id?: boolean
  name?: boolean
  imageUri?: boolean
  status?: boolean
  chatRoomUser?: boolean | FindManyChatRoomUserArgs
  Message?: boolean | FindManyMessageArgs
}

export type UserInclude = {
  chatRoomUser?: boolean | FindManyChatRoomUserArgs
  Message?: boolean | FindManyMessageArgs
}

export type UserGetPayload<
  S extends boolean | null | undefined | UserArgs,
  U = keyof S
> = S extends true
  ? User
  : S extends undefined
  ? never
  : S extends UserArgs | FindManyUserArgs
  ? 'include' extends U
    ? User  & {
      [P in TrueKeys<S['include']>]:
      P extends 'chatRoomUser'
      ? Array<ChatRoomUserGetPayload<S['include'][P]>> :
      P extends 'Message'
      ? Array<MessageGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof User ? User[P]
: 
      P extends 'chatRoomUser'
      ? Array<ChatRoomUserGetPayload<S['select'][P]>> :
      P extends 'Message'
      ? Array<MessageGetPayload<S['select'][P]>> : never
    }
  : User
: User


export interface UserDelegate {
  /**
   * Find zero or one User that matches the filter.
   * @param {FindOneUserArgs} args - Arguments to find a User
   * @example
   * // Get one User
   * const user = await prisma.user.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneUserArgs>(
    args: Subset<T, FindOneUserArgs>
  ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>
  /**
   * Find the first User that matches the filter.
   * @param {FindFirstUserArgs} args - Arguments to find a User
   * @example
   * // Get one User
   * const user = await prisma.user.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstUserArgs>(
    args?: Subset<T, FindFirstUserArgs>
  ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>
  /**
   * Find zero or more Users that matches the filter.
   * @param {FindManyUserArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Users
   * const users = await prisma.user.findMany()
   * 
   * // Get first 10 Users
   * const users = await prisma.user.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyUserArgs>(
    args?: Subset<T, FindManyUserArgs>
  ): CheckSelect<T, Promise<Array<User>>, Promise<Array<UserGetPayload<T>>>>
  /**
   * Create a User.
   * @param {UserCreateArgs} args - Arguments to create a User.
   * @example
   * // Create one User
   * const User = await prisma.user.create({
   *   data: {
   *     // ... data to create a User
   *   }
   * })
   * 
  **/
  create<T extends UserCreateArgs>(
    args: Subset<T, UserCreateArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Delete a User.
   * @param {UserDeleteArgs} args - Arguments to delete one User.
   * @example
   * // Delete one User
   * const User = await prisma.user.delete({
   *   where: {
   *     // ... filter to delete one User
   *   }
   * })
   * 
  **/
  delete<T extends UserDeleteArgs>(
    args: Subset<T, UserDeleteArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Update one User.
   * @param {UserUpdateArgs} args - Arguments to update one User.
   * @example
   * // Update one User
   * const user = await prisma.user.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends UserUpdateArgs>(
    args: Subset<T, UserUpdateArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Delete zero or more Users.
   * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
   * @example
   * // Delete a few Users
   * const { count } = await prisma.user.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends UserDeleteManyArgs>(
    args: Subset<T, UserDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Users.
   * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Users
   * const user = await prisma.user.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends UserUpdateManyArgs>(
    args: Subset<T, UserUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one User.
   * @param {UserUpsertArgs} args - Arguments to update or create a User.
   * @example
   * // Update or create a User
   * const user = await prisma.user.upsert({
   *   create: {
   *     // ... data to create a User
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the User we want to update
   *   }
   * })
  **/
  upsert<T extends UserUpsertArgs>(
    args: Subset<T, UserUpsertArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyUserArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateUserArgs>(args: Subset<T, AggregateUserArgs>): Promise<GetUserAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for User.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__UserClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  chatRoomUser<T extends FindManyChatRoomUserArgs = {}>(args?: Subset<T, FindManyChatRoomUserArgs>): CheckSelect<T, Promise<Array<ChatRoomUser>>, Promise<Array<ChatRoomUserGetPayload<T>>>>;

  Message<T extends FindManyMessageArgs = {}>(args?: Subset<T, FindManyMessageArgs>): CheckSelect<T, Promise<Array<Message>>, Promise<Array<MessageGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * User findOne
 */
export type FindOneUserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * Filter, which User to fetch.
  **/
  where: UserWhereUniqueInput
}


/**
 * User findFirst
 */
export type FindFirstUserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * Filter, which User to fetch.
  **/
  where?: UserWhereInput
  orderBy?: Enumerable<UserOrderByInput> | UserOrderByInput
  cursor?: UserWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<UserDistinctFieldEnum>
}


/**
 * User findMany
 */
export type FindManyUserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * Filter, which Users to fetch.
  **/
  where?: UserWhereInput
  /**
   * Determine the order of the Users to fetch.
  **/
  orderBy?: Enumerable<UserOrderByInput> | UserOrderByInput
  /**
   * Sets the position for listing Users.
  **/
  cursor?: UserWhereUniqueInput
  /**
   * The number of Users to fetch. If negative number, it will take Users before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Users.
  **/
  skip?: number
  distinct?: Enumerable<UserDistinctFieldEnum>
}


/**
 * User create
 */
export type UserCreateArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * The data needed to create a User.
  **/
  data: UserCreateInput
}


/**
 * User update
 */
export type UserUpdateArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * The data needed to update a User.
  **/
  data: UserUpdateInput
  /**
   * Choose, which User to update.
  **/
  where: UserWhereUniqueInput
}


/**
 * User updateMany
 */
export type UserUpdateManyArgs = {
  data: UserUpdateManyMutationInput
  where?: UserWhereInput
}


/**
 * User upsert
 */
export type UserUpsertArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * The filter to search for the User to update in case it exists.
  **/
  where: UserWhereUniqueInput
  /**
   * In case the User found by the `where` argument doesn't exist, create a new User with this data.
  **/
  create: UserCreateInput
  /**
   * In case the User was found with the provided `where` argument, update it with this data.
  **/
  update: UserUpdateInput
}


/**
 * User delete
 */
export type UserDeleteArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * Filter which User to delete.
  **/
  where: UserWhereUniqueInput
}


/**
 * User deleteMany
 */
export type UserDeleteManyArgs = {
  where?: UserWhereInput
}


/**
 * User without action
 */
export type UserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
}



/**
 * Model ChatRoomUser
 */

export type ChatRoomUser = {
  id: number
  userID: number
  chatRoomID: number
}


export type AggregateChatRoomUser = {
  count: number
  avg: ChatRoomUserAvgAggregateOutputType | null
  sum: ChatRoomUserSumAggregateOutputType | null
  min: ChatRoomUserMinAggregateOutputType | null
  max: ChatRoomUserMaxAggregateOutputType | null
}

export type ChatRoomUserAvgAggregateOutputType = {
  id: number
  userID: number
  chatRoomID: number
}

export type ChatRoomUserSumAggregateOutputType = {
  id: number
  userID: number
  chatRoomID: number
}

export type ChatRoomUserMinAggregateOutputType = {
  id: number
  userID: number
  chatRoomID: number
}

export type ChatRoomUserMaxAggregateOutputType = {
  id: number
  userID: number
  chatRoomID: number
}


export type ChatRoomUserAvgAggregateInputType = {
  id?: true
  userID?: true
  chatRoomID?: true
}

export type ChatRoomUserSumAggregateInputType = {
  id?: true
  userID?: true
  chatRoomID?: true
}

export type ChatRoomUserMinAggregateInputType = {
  id?: true
  userID?: true
  chatRoomID?: true
}

export type ChatRoomUserMaxAggregateInputType = {
  id?: true
  userID?: true
  chatRoomID?: true
}

export type AggregateChatRoomUserArgs = {
  where?: ChatRoomUserWhereInput
  orderBy?: Enumerable<ChatRoomUserOrderByInput> | ChatRoomUserOrderByInput
  cursor?: ChatRoomUserWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<ChatRoomUserDistinctFieldEnum>
  count?: true
  avg?: ChatRoomUserAvgAggregateInputType
  sum?: ChatRoomUserSumAggregateInputType
  min?: ChatRoomUserMinAggregateInputType
  max?: ChatRoomUserMaxAggregateInputType
}

export type GetChatRoomUserAggregateType<T extends AggregateChatRoomUserArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetChatRoomUserAggregateScalarType<T[P]>
}

export type GetChatRoomUserAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof ChatRoomUserAvgAggregateOutputType ? ChatRoomUserAvgAggregateOutputType[P] : never
}
    
    

export type ChatRoomUserSelect = {
  id?: boolean
  userID?: boolean
  chatRoomID?: boolean
  user?: boolean | UserArgs
  ChatRoom?: boolean | FindManyChatRoomArgs
}

export type ChatRoomUserInclude = {
  user?: boolean | UserArgs
  ChatRoom?: boolean | FindManyChatRoomArgs
}

export type ChatRoomUserGetPayload<
  S extends boolean | null | undefined | ChatRoomUserArgs,
  U = keyof S
> = S extends true
  ? ChatRoomUser
  : S extends undefined
  ? never
  : S extends ChatRoomUserArgs | FindManyChatRoomUserArgs
  ? 'include' extends U
    ? ChatRoomUser  & {
      [P in TrueKeys<S['include']>]:
      P extends 'user'
      ? UserGetPayload<S['include'][P]> :
      P extends 'ChatRoom'
      ? Array<ChatRoomGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof ChatRoomUser ? ChatRoomUser[P]
: 
      P extends 'user'
      ? UserGetPayload<S['select'][P]> :
      P extends 'ChatRoom'
      ? Array<ChatRoomGetPayload<S['select'][P]>> : never
    }
  : ChatRoomUser
: ChatRoomUser


export interface ChatRoomUserDelegate {
  /**
   * Find zero or one ChatRoomUser that matches the filter.
   * @param {FindOneChatRoomUserArgs} args - Arguments to find a ChatRoomUser
   * @example
   * // Get one ChatRoomUser
   * const chatRoomUser = await prisma.chatRoomUser.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneChatRoomUserArgs>(
    args: Subset<T, FindOneChatRoomUserArgs>
  ): CheckSelect<T, Prisma__ChatRoomUserClient<ChatRoomUser | null>, Prisma__ChatRoomUserClient<ChatRoomUserGetPayload<T> | null>>
  /**
   * Find the first ChatRoomUser that matches the filter.
   * @param {FindFirstChatRoomUserArgs} args - Arguments to find a ChatRoomUser
   * @example
   * // Get one ChatRoomUser
   * const chatRoomUser = await prisma.chatRoomUser.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstChatRoomUserArgs>(
    args?: Subset<T, FindFirstChatRoomUserArgs>
  ): CheckSelect<T, Prisma__ChatRoomUserClient<ChatRoomUser | null>, Prisma__ChatRoomUserClient<ChatRoomUserGetPayload<T> | null>>
  /**
   * Find zero or more ChatRoomUsers that matches the filter.
   * @param {FindManyChatRoomUserArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ChatRoomUsers
   * const chatRoomUsers = await prisma.chatRoomUser.findMany()
   * 
   * // Get first 10 ChatRoomUsers
   * const chatRoomUsers = await prisma.chatRoomUser.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const chatRoomUserWithIdOnly = await prisma.chatRoomUser.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyChatRoomUserArgs>(
    args?: Subset<T, FindManyChatRoomUserArgs>
  ): CheckSelect<T, Promise<Array<ChatRoomUser>>, Promise<Array<ChatRoomUserGetPayload<T>>>>
  /**
   * Create a ChatRoomUser.
   * @param {ChatRoomUserCreateArgs} args - Arguments to create a ChatRoomUser.
   * @example
   * // Create one ChatRoomUser
   * const ChatRoomUser = await prisma.chatRoomUser.create({
   *   data: {
   *     // ... data to create a ChatRoomUser
   *   }
   * })
   * 
  **/
  create<T extends ChatRoomUserCreateArgs>(
    args: Subset<T, ChatRoomUserCreateArgs>
  ): CheckSelect<T, Prisma__ChatRoomUserClient<ChatRoomUser>, Prisma__ChatRoomUserClient<ChatRoomUserGetPayload<T>>>
  /**
   * Delete a ChatRoomUser.
   * @param {ChatRoomUserDeleteArgs} args - Arguments to delete one ChatRoomUser.
   * @example
   * // Delete one ChatRoomUser
   * const ChatRoomUser = await prisma.chatRoomUser.delete({
   *   where: {
   *     // ... filter to delete one ChatRoomUser
   *   }
   * })
   * 
  **/
  delete<T extends ChatRoomUserDeleteArgs>(
    args: Subset<T, ChatRoomUserDeleteArgs>
  ): CheckSelect<T, Prisma__ChatRoomUserClient<ChatRoomUser>, Prisma__ChatRoomUserClient<ChatRoomUserGetPayload<T>>>
  /**
   * Update one ChatRoomUser.
   * @param {ChatRoomUserUpdateArgs} args - Arguments to update one ChatRoomUser.
   * @example
   * // Update one ChatRoomUser
   * const chatRoomUser = await prisma.chatRoomUser.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends ChatRoomUserUpdateArgs>(
    args: Subset<T, ChatRoomUserUpdateArgs>
  ): CheckSelect<T, Prisma__ChatRoomUserClient<ChatRoomUser>, Prisma__ChatRoomUserClient<ChatRoomUserGetPayload<T>>>
  /**
   * Delete zero or more ChatRoomUsers.
   * @param {ChatRoomUserDeleteManyArgs} args - Arguments to filter ChatRoomUsers to delete.
   * @example
   * // Delete a few ChatRoomUsers
   * const { count } = await prisma.chatRoomUser.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends ChatRoomUserDeleteManyArgs>(
    args: Subset<T, ChatRoomUserDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more ChatRoomUsers.
   * @param {ChatRoomUserUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ChatRoomUsers
   * const chatRoomUser = await prisma.chatRoomUser.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends ChatRoomUserUpdateManyArgs>(
    args: Subset<T, ChatRoomUserUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one ChatRoomUser.
   * @param {ChatRoomUserUpsertArgs} args - Arguments to update or create a ChatRoomUser.
   * @example
   * // Update or create a ChatRoomUser
   * const chatRoomUser = await prisma.chatRoomUser.upsert({
   *   create: {
   *     // ... data to create a ChatRoomUser
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ChatRoomUser we want to update
   *   }
   * })
  **/
  upsert<T extends ChatRoomUserUpsertArgs>(
    args: Subset<T, ChatRoomUserUpsertArgs>
  ): CheckSelect<T, Prisma__ChatRoomUserClient<ChatRoomUser>, Prisma__ChatRoomUserClient<ChatRoomUserGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyChatRoomUserArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateChatRoomUserArgs>(args: Subset<T, AggregateChatRoomUserArgs>): Promise<GetChatRoomUserAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for ChatRoomUser.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__ChatRoomUserClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>;

  ChatRoom<T extends FindManyChatRoomArgs = {}>(args?: Subset<T, FindManyChatRoomArgs>): CheckSelect<T, Promise<Array<ChatRoom>>, Promise<Array<ChatRoomGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * ChatRoomUser findOne
 */
export type FindOneChatRoomUserArgs = {
  /**
   * Select specific fields to fetch from the ChatRoomUser
  **/
  select?: ChatRoomUserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ChatRoomUserInclude | null
  /**
   * Filter, which ChatRoomUser to fetch.
  **/
  where: ChatRoomUserWhereUniqueInput
}


/**
 * ChatRoomUser findFirst
 */
export type FindFirstChatRoomUserArgs = {
  /**
   * Select specific fields to fetch from the ChatRoomUser
  **/
  select?: ChatRoomUserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ChatRoomUserInclude | null
  /**
   * Filter, which ChatRoomUser to fetch.
  **/
  where?: ChatRoomUserWhereInput
  orderBy?: Enumerable<ChatRoomUserOrderByInput> | ChatRoomUserOrderByInput
  cursor?: ChatRoomUserWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<ChatRoomUserDistinctFieldEnum>
}


/**
 * ChatRoomUser findMany
 */
export type FindManyChatRoomUserArgs = {
  /**
   * Select specific fields to fetch from the ChatRoomUser
  **/
  select?: ChatRoomUserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ChatRoomUserInclude | null
  /**
   * Filter, which ChatRoomUsers to fetch.
  **/
  where?: ChatRoomUserWhereInput
  /**
   * Determine the order of the ChatRoomUsers to fetch.
  **/
  orderBy?: Enumerable<ChatRoomUserOrderByInput> | ChatRoomUserOrderByInput
  /**
   * Sets the position for listing ChatRoomUsers.
  **/
  cursor?: ChatRoomUserWhereUniqueInput
  /**
   * The number of ChatRoomUsers to fetch. If negative number, it will take ChatRoomUsers before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` ChatRoomUsers.
  **/
  skip?: number
  distinct?: Enumerable<ChatRoomUserDistinctFieldEnum>
}


/**
 * ChatRoomUser create
 */
export type ChatRoomUserCreateArgs = {
  /**
   * Select specific fields to fetch from the ChatRoomUser
  **/
  select?: ChatRoomUserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ChatRoomUserInclude | null
  /**
   * The data needed to create a ChatRoomUser.
  **/
  data: ChatRoomUserCreateInput
}


/**
 * ChatRoomUser update
 */
export type ChatRoomUserUpdateArgs = {
  /**
   * Select specific fields to fetch from the ChatRoomUser
  **/
  select?: ChatRoomUserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ChatRoomUserInclude | null
  /**
   * The data needed to update a ChatRoomUser.
  **/
  data: ChatRoomUserUpdateInput
  /**
   * Choose, which ChatRoomUser to update.
  **/
  where: ChatRoomUserWhereUniqueInput
}


/**
 * ChatRoomUser updateMany
 */
export type ChatRoomUserUpdateManyArgs = {
  data: ChatRoomUserUpdateManyMutationInput
  where?: ChatRoomUserWhereInput
}


/**
 * ChatRoomUser upsert
 */
export type ChatRoomUserUpsertArgs = {
  /**
   * Select specific fields to fetch from the ChatRoomUser
  **/
  select?: ChatRoomUserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ChatRoomUserInclude | null
  /**
   * The filter to search for the ChatRoomUser to update in case it exists.
  **/
  where: ChatRoomUserWhereUniqueInput
  /**
   * In case the ChatRoomUser found by the `where` argument doesn't exist, create a new ChatRoomUser with this data.
  **/
  create: ChatRoomUserCreateInput
  /**
   * In case the ChatRoomUser was found with the provided `where` argument, update it with this data.
  **/
  update: ChatRoomUserUpdateInput
}


/**
 * ChatRoomUser delete
 */
export type ChatRoomUserDeleteArgs = {
  /**
   * Select specific fields to fetch from the ChatRoomUser
  **/
  select?: ChatRoomUserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ChatRoomUserInclude | null
  /**
   * Filter which ChatRoomUser to delete.
  **/
  where: ChatRoomUserWhereUniqueInput
}


/**
 * ChatRoomUser deleteMany
 */
export type ChatRoomUserDeleteManyArgs = {
  where?: ChatRoomUserWhereInput
}


/**
 * ChatRoomUser without action
 */
export type ChatRoomUserArgs = {
  /**
   * Select specific fields to fetch from the ChatRoomUser
  **/
  select?: ChatRoomUserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ChatRoomUserInclude | null
}



/**
 * Model ChatRoom
 */

export type ChatRoom = {
  id: number
  lastMessageID: number
}


export type AggregateChatRoom = {
  count: number
  avg: ChatRoomAvgAggregateOutputType | null
  sum: ChatRoomSumAggregateOutputType | null
  min: ChatRoomMinAggregateOutputType | null
  max: ChatRoomMaxAggregateOutputType | null
}

export type ChatRoomAvgAggregateOutputType = {
  id: number
  lastMessageID: number
}

export type ChatRoomSumAggregateOutputType = {
  id: number
  lastMessageID: number
}

export type ChatRoomMinAggregateOutputType = {
  id: number
  lastMessageID: number
}

export type ChatRoomMaxAggregateOutputType = {
  id: number
  lastMessageID: number
}


export type ChatRoomAvgAggregateInputType = {
  id?: true
  lastMessageID?: true
}

export type ChatRoomSumAggregateInputType = {
  id?: true
  lastMessageID?: true
}

export type ChatRoomMinAggregateInputType = {
  id?: true
  lastMessageID?: true
}

export type ChatRoomMaxAggregateInputType = {
  id?: true
  lastMessageID?: true
}

export type AggregateChatRoomArgs = {
  where?: ChatRoomWhereInput
  orderBy?: Enumerable<ChatRoomOrderByInput> | ChatRoomOrderByInput
  cursor?: ChatRoomWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<ChatRoomDistinctFieldEnum>
  count?: true
  avg?: ChatRoomAvgAggregateInputType
  sum?: ChatRoomSumAggregateInputType
  min?: ChatRoomMinAggregateInputType
  max?: ChatRoomMaxAggregateInputType
}

export type GetChatRoomAggregateType<T extends AggregateChatRoomArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetChatRoomAggregateScalarType<T[P]>
}

export type GetChatRoomAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof ChatRoomAvgAggregateOutputType ? ChatRoomAvgAggregateOutputType[P] : never
}
    
    

export type ChatRoomSelect = {
  id?: boolean
  chatRoomUsers?: boolean | ChatRoomUserArgs
  messages?: boolean | FindManyMessageArgs
  lastMessageID?: boolean
}

export type ChatRoomInclude = {
  chatRoomUsers?: boolean | ChatRoomUserArgs
  messages?: boolean | FindManyMessageArgs
}

export type ChatRoomGetPayload<
  S extends boolean | null | undefined | ChatRoomArgs,
  U = keyof S
> = S extends true
  ? ChatRoom
  : S extends undefined
  ? never
  : S extends ChatRoomArgs | FindManyChatRoomArgs
  ? 'include' extends U
    ? ChatRoom  & {
      [P in TrueKeys<S['include']>]:
      P extends 'chatRoomUsers'
      ? ChatRoomUserGetPayload<S['include'][P]> :
      P extends 'messages'
      ? Array<MessageGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof ChatRoom ? ChatRoom[P]
: 
      P extends 'chatRoomUsers'
      ? ChatRoomUserGetPayload<S['select'][P]> :
      P extends 'messages'
      ? Array<MessageGetPayload<S['select'][P]>> : never
    }
  : ChatRoom
: ChatRoom


export interface ChatRoomDelegate {
  /**
   * Find zero or one ChatRoom that matches the filter.
   * @param {FindOneChatRoomArgs} args - Arguments to find a ChatRoom
   * @example
   * // Get one ChatRoom
   * const chatRoom = await prisma.chatRoom.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneChatRoomArgs>(
    args: Subset<T, FindOneChatRoomArgs>
  ): CheckSelect<T, Prisma__ChatRoomClient<ChatRoom | null>, Prisma__ChatRoomClient<ChatRoomGetPayload<T> | null>>
  /**
   * Find the first ChatRoom that matches the filter.
   * @param {FindFirstChatRoomArgs} args - Arguments to find a ChatRoom
   * @example
   * // Get one ChatRoom
   * const chatRoom = await prisma.chatRoom.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstChatRoomArgs>(
    args?: Subset<T, FindFirstChatRoomArgs>
  ): CheckSelect<T, Prisma__ChatRoomClient<ChatRoom | null>, Prisma__ChatRoomClient<ChatRoomGetPayload<T> | null>>
  /**
   * Find zero or more ChatRooms that matches the filter.
   * @param {FindManyChatRoomArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ChatRooms
   * const chatRooms = await prisma.chatRoom.findMany()
   * 
   * // Get first 10 ChatRooms
   * const chatRooms = await prisma.chatRoom.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const chatRoomWithIdOnly = await prisma.chatRoom.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyChatRoomArgs>(
    args?: Subset<T, FindManyChatRoomArgs>
  ): CheckSelect<T, Promise<Array<ChatRoom>>, Promise<Array<ChatRoomGetPayload<T>>>>
  /**
   * Create a ChatRoom.
   * @param {ChatRoomCreateArgs} args - Arguments to create a ChatRoom.
   * @example
   * // Create one ChatRoom
   * const ChatRoom = await prisma.chatRoom.create({
   *   data: {
   *     // ... data to create a ChatRoom
   *   }
   * })
   * 
  **/
  create<T extends ChatRoomCreateArgs>(
    args: Subset<T, ChatRoomCreateArgs>
  ): CheckSelect<T, Prisma__ChatRoomClient<ChatRoom>, Prisma__ChatRoomClient<ChatRoomGetPayload<T>>>
  /**
   * Delete a ChatRoom.
   * @param {ChatRoomDeleteArgs} args - Arguments to delete one ChatRoom.
   * @example
   * // Delete one ChatRoom
   * const ChatRoom = await prisma.chatRoom.delete({
   *   where: {
   *     // ... filter to delete one ChatRoom
   *   }
   * })
   * 
  **/
  delete<T extends ChatRoomDeleteArgs>(
    args: Subset<T, ChatRoomDeleteArgs>
  ): CheckSelect<T, Prisma__ChatRoomClient<ChatRoom>, Prisma__ChatRoomClient<ChatRoomGetPayload<T>>>
  /**
   * Update one ChatRoom.
   * @param {ChatRoomUpdateArgs} args - Arguments to update one ChatRoom.
   * @example
   * // Update one ChatRoom
   * const chatRoom = await prisma.chatRoom.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends ChatRoomUpdateArgs>(
    args: Subset<T, ChatRoomUpdateArgs>
  ): CheckSelect<T, Prisma__ChatRoomClient<ChatRoom>, Prisma__ChatRoomClient<ChatRoomGetPayload<T>>>
  /**
   * Delete zero or more ChatRooms.
   * @param {ChatRoomDeleteManyArgs} args - Arguments to filter ChatRooms to delete.
   * @example
   * // Delete a few ChatRooms
   * const { count } = await prisma.chatRoom.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends ChatRoomDeleteManyArgs>(
    args: Subset<T, ChatRoomDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more ChatRooms.
   * @param {ChatRoomUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ChatRooms
   * const chatRoom = await prisma.chatRoom.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends ChatRoomUpdateManyArgs>(
    args: Subset<T, ChatRoomUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one ChatRoom.
   * @param {ChatRoomUpsertArgs} args - Arguments to update or create a ChatRoom.
   * @example
   * // Update or create a ChatRoom
   * const chatRoom = await prisma.chatRoom.upsert({
   *   create: {
   *     // ... data to create a ChatRoom
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ChatRoom we want to update
   *   }
   * })
  **/
  upsert<T extends ChatRoomUpsertArgs>(
    args: Subset<T, ChatRoomUpsertArgs>
  ): CheckSelect<T, Prisma__ChatRoomClient<ChatRoom>, Prisma__ChatRoomClient<ChatRoomGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyChatRoomArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateChatRoomArgs>(args: Subset<T, AggregateChatRoomArgs>): Promise<GetChatRoomAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for ChatRoom.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__ChatRoomClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  chatRoomUsers<T extends ChatRoomUserArgs = {}>(args?: Subset<T, ChatRoomUserArgs>): CheckSelect<T, Prisma__ChatRoomUserClient<ChatRoomUser | null>, Prisma__ChatRoomUserClient<ChatRoomUserGetPayload<T> | null>>;

  messages<T extends FindManyMessageArgs = {}>(args?: Subset<T, FindManyMessageArgs>): CheckSelect<T, Promise<Array<Message>>, Promise<Array<MessageGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * ChatRoom findOne
 */
export type FindOneChatRoomArgs = {
  /**
   * Select specific fields to fetch from the ChatRoom
  **/
  select?: ChatRoomSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ChatRoomInclude | null
  /**
   * Filter, which ChatRoom to fetch.
  **/
  where: ChatRoomWhereUniqueInput
}


/**
 * ChatRoom findFirst
 */
export type FindFirstChatRoomArgs = {
  /**
   * Select specific fields to fetch from the ChatRoom
  **/
  select?: ChatRoomSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ChatRoomInclude | null
  /**
   * Filter, which ChatRoom to fetch.
  **/
  where?: ChatRoomWhereInput
  orderBy?: Enumerable<ChatRoomOrderByInput> | ChatRoomOrderByInput
  cursor?: ChatRoomWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<ChatRoomDistinctFieldEnum>
}


/**
 * ChatRoom findMany
 */
export type FindManyChatRoomArgs = {
  /**
   * Select specific fields to fetch from the ChatRoom
  **/
  select?: ChatRoomSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ChatRoomInclude | null
  /**
   * Filter, which ChatRooms to fetch.
  **/
  where?: ChatRoomWhereInput
  /**
   * Determine the order of the ChatRooms to fetch.
  **/
  orderBy?: Enumerable<ChatRoomOrderByInput> | ChatRoomOrderByInput
  /**
   * Sets the position for listing ChatRooms.
  **/
  cursor?: ChatRoomWhereUniqueInput
  /**
   * The number of ChatRooms to fetch. If negative number, it will take ChatRooms before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` ChatRooms.
  **/
  skip?: number
  distinct?: Enumerable<ChatRoomDistinctFieldEnum>
}


/**
 * ChatRoom create
 */
export type ChatRoomCreateArgs = {
  /**
   * Select specific fields to fetch from the ChatRoom
  **/
  select?: ChatRoomSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ChatRoomInclude | null
  /**
   * The data needed to create a ChatRoom.
  **/
  data: ChatRoomCreateInput
}


/**
 * ChatRoom update
 */
export type ChatRoomUpdateArgs = {
  /**
   * Select specific fields to fetch from the ChatRoom
  **/
  select?: ChatRoomSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ChatRoomInclude | null
  /**
   * The data needed to update a ChatRoom.
  **/
  data: ChatRoomUpdateInput
  /**
   * Choose, which ChatRoom to update.
  **/
  where: ChatRoomWhereUniqueInput
}


/**
 * ChatRoom updateMany
 */
export type ChatRoomUpdateManyArgs = {
  data: ChatRoomUpdateManyMutationInput
  where?: ChatRoomWhereInput
}


/**
 * ChatRoom upsert
 */
export type ChatRoomUpsertArgs = {
  /**
   * Select specific fields to fetch from the ChatRoom
  **/
  select?: ChatRoomSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ChatRoomInclude | null
  /**
   * The filter to search for the ChatRoom to update in case it exists.
  **/
  where: ChatRoomWhereUniqueInput
  /**
   * In case the ChatRoom found by the `where` argument doesn't exist, create a new ChatRoom with this data.
  **/
  create: ChatRoomCreateInput
  /**
   * In case the ChatRoom was found with the provided `where` argument, update it with this data.
  **/
  update: ChatRoomUpdateInput
}


/**
 * ChatRoom delete
 */
export type ChatRoomDeleteArgs = {
  /**
   * Select specific fields to fetch from the ChatRoom
  **/
  select?: ChatRoomSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ChatRoomInclude | null
  /**
   * Filter which ChatRoom to delete.
  **/
  where: ChatRoomWhereUniqueInput
}


/**
 * ChatRoom deleteMany
 */
export type ChatRoomDeleteManyArgs = {
  where?: ChatRoomWhereInput
}


/**
 * ChatRoom without action
 */
export type ChatRoomArgs = {
  /**
   * Select specific fields to fetch from the ChatRoom
  **/
  select?: ChatRoomSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ChatRoomInclude | null
}



/**
 * Model Message
 */

export type Message = {
  id: number
  userID: number
  content: string
  createdAt: string
  chatRoomID: number
}


export type AggregateMessage = {
  count: number
  avg: MessageAvgAggregateOutputType | null
  sum: MessageSumAggregateOutputType | null
  min: MessageMinAggregateOutputType | null
  max: MessageMaxAggregateOutputType | null
}

export type MessageAvgAggregateOutputType = {
  id: number
  userID: number
  chatRoomID: number
}

export type MessageSumAggregateOutputType = {
  id: number
  userID: number
  chatRoomID: number
}

export type MessageMinAggregateOutputType = {
  id: number
  userID: number
  chatRoomID: number
}

export type MessageMaxAggregateOutputType = {
  id: number
  userID: number
  chatRoomID: number
}


export type MessageAvgAggregateInputType = {
  id?: true
  userID?: true
  chatRoomID?: true
}

export type MessageSumAggregateInputType = {
  id?: true
  userID?: true
  chatRoomID?: true
}

export type MessageMinAggregateInputType = {
  id?: true
  userID?: true
  chatRoomID?: true
}

export type MessageMaxAggregateInputType = {
  id?: true
  userID?: true
  chatRoomID?: true
}

export type AggregateMessageArgs = {
  where?: MessageWhereInput
  orderBy?: Enumerable<MessageOrderByInput> | MessageOrderByInput
  cursor?: MessageWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<MessageDistinctFieldEnum>
  count?: true
  avg?: MessageAvgAggregateInputType
  sum?: MessageSumAggregateInputType
  min?: MessageMinAggregateInputType
  max?: MessageMaxAggregateInputType
}

export type GetMessageAggregateType<T extends AggregateMessageArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetMessageAggregateScalarType<T[P]>
}

export type GetMessageAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof MessageAvgAggregateOutputType ? MessageAvgAggregateOutputType[P] : never
}
    
    

export type MessageSelect = {
  id?: boolean
  userID?: boolean
  content?: boolean
  createdAt?: boolean
  chatRoomID?: boolean
  user?: boolean | UserArgs
  chatRoom?: boolean | ChatRoomArgs
}

export type MessageInclude = {
  user?: boolean | UserArgs
  chatRoom?: boolean | ChatRoomArgs
}

export type MessageGetPayload<
  S extends boolean | null | undefined | MessageArgs,
  U = keyof S
> = S extends true
  ? Message
  : S extends undefined
  ? never
  : S extends MessageArgs | FindManyMessageArgs
  ? 'include' extends U
    ? Message  & {
      [P in TrueKeys<S['include']>]:
      P extends 'user'
      ? UserGetPayload<S['include'][P]> :
      P extends 'chatRoom'
      ? ChatRoomGetPayload<S['include'][P]> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Message ? Message[P]
: 
      P extends 'user'
      ? UserGetPayload<S['select'][P]> :
      P extends 'chatRoom'
      ? ChatRoomGetPayload<S['select'][P]> : never
    }
  : Message
: Message


export interface MessageDelegate {
  /**
   * Find zero or one Message that matches the filter.
   * @param {FindOneMessageArgs} args - Arguments to find a Message
   * @example
   * // Get one Message
   * const message = await prisma.message.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneMessageArgs>(
    args: Subset<T, FindOneMessageArgs>
  ): CheckSelect<T, Prisma__MessageClient<Message | null>, Prisma__MessageClient<MessageGetPayload<T> | null>>
  /**
   * Find the first Message that matches the filter.
   * @param {FindFirstMessageArgs} args - Arguments to find a Message
   * @example
   * // Get one Message
   * const message = await prisma.message.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstMessageArgs>(
    args?: Subset<T, FindFirstMessageArgs>
  ): CheckSelect<T, Prisma__MessageClient<Message | null>, Prisma__MessageClient<MessageGetPayload<T> | null>>
  /**
   * Find zero or more Messages that matches the filter.
   * @param {FindManyMessageArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Messages
   * const messages = await prisma.message.findMany()
   * 
   * // Get first 10 Messages
   * const messages = await prisma.message.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyMessageArgs>(
    args?: Subset<T, FindManyMessageArgs>
  ): CheckSelect<T, Promise<Array<Message>>, Promise<Array<MessageGetPayload<T>>>>
  /**
   * Create a Message.
   * @param {MessageCreateArgs} args - Arguments to create a Message.
   * @example
   * // Create one Message
   * const Message = await prisma.message.create({
   *   data: {
   *     // ... data to create a Message
   *   }
   * })
   * 
  **/
  create<T extends MessageCreateArgs>(
    args: Subset<T, MessageCreateArgs>
  ): CheckSelect<T, Prisma__MessageClient<Message>, Prisma__MessageClient<MessageGetPayload<T>>>
  /**
   * Delete a Message.
   * @param {MessageDeleteArgs} args - Arguments to delete one Message.
   * @example
   * // Delete one Message
   * const Message = await prisma.message.delete({
   *   where: {
   *     // ... filter to delete one Message
   *   }
   * })
   * 
  **/
  delete<T extends MessageDeleteArgs>(
    args: Subset<T, MessageDeleteArgs>
  ): CheckSelect<T, Prisma__MessageClient<Message>, Prisma__MessageClient<MessageGetPayload<T>>>
  /**
   * Update one Message.
   * @param {MessageUpdateArgs} args - Arguments to update one Message.
   * @example
   * // Update one Message
   * const message = await prisma.message.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends MessageUpdateArgs>(
    args: Subset<T, MessageUpdateArgs>
  ): CheckSelect<T, Prisma__MessageClient<Message>, Prisma__MessageClient<MessageGetPayload<T>>>
  /**
   * Delete zero or more Messages.
   * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
   * @example
   * // Delete a few Messages
   * const { count } = await prisma.message.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends MessageDeleteManyArgs>(
    args: Subset<T, MessageDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Messages.
   * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Messages
   * const message = await prisma.message.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends MessageUpdateManyArgs>(
    args: Subset<T, MessageUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Message.
   * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
   * @example
   * // Update or create a Message
   * const message = await prisma.message.upsert({
   *   create: {
   *     // ... data to create a Message
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Message we want to update
   *   }
   * })
  **/
  upsert<T extends MessageUpsertArgs>(
    args: Subset<T, MessageUpsertArgs>
  ): CheckSelect<T, Prisma__MessageClient<Message>, Prisma__MessageClient<MessageGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyMessageArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateMessageArgs>(args: Subset<T, AggregateMessageArgs>): Promise<GetMessageAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Message.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__MessageClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>;

  chatRoom<T extends ChatRoomArgs = {}>(args?: Subset<T, ChatRoomArgs>): CheckSelect<T, Prisma__ChatRoomClient<ChatRoom | null>, Prisma__ChatRoomClient<ChatRoomGetPayload<T> | null>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Message findOne
 */
export type FindOneMessageArgs = {
  /**
   * Select specific fields to fetch from the Message
  **/
  select?: MessageSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: MessageInclude | null
  /**
   * Filter, which Message to fetch.
  **/
  where: MessageWhereUniqueInput
}


/**
 * Message findFirst
 */
export type FindFirstMessageArgs = {
  /**
   * Select specific fields to fetch from the Message
  **/
  select?: MessageSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: MessageInclude | null
  /**
   * Filter, which Message to fetch.
  **/
  where?: MessageWhereInput
  orderBy?: Enumerable<MessageOrderByInput> | MessageOrderByInput
  cursor?: MessageWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<MessageDistinctFieldEnum>
}


/**
 * Message findMany
 */
export type FindManyMessageArgs = {
  /**
   * Select specific fields to fetch from the Message
  **/
  select?: MessageSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: MessageInclude | null
  /**
   * Filter, which Messages to fetch.
  **/
  where?: MessageWhereInput
  /**
   * Determine the order of the Messages to fetch.
  **/
  orderBy?: Enumerable<MessageOrderByInput> | MessageOrderByInput
  /**
   * Sets the position for listing Messages.
  **/
  cursor?: MessageWhereUniqueInput
  /**
   * The number of Messages to fetch. If negative number, it will take Messages before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Messages.
  **/
  skip?: number
  distinct?: Enumerable<MessageDistinctFieldEnum>
}


/**
 * Message create
 */
export type MessageCreateArgs = {
  /**
   * Select specific fields to fetch from the Message
  **/
  select?: MessageSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: MessageInclude | null
  /**
   * The data needed to create a Message.
  **/
  data: MessageCreateInput
}


/**
 * Message update
 */
export type MessageUpdateArgs = {
  /**
   * Select specific fields to fetch from the Message
  **/
  select?: MessageSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: MessageInclude | null
  /**
   * The data needed to update a Message.
  **/
  data: MessageUpdateInput
  /**
   * Choose, which Message to update.
  **/
  where: MessageWhereUniqueInput
}


/**
 * Message updateMany
 */
export type MessageUpdateManyArgs = {
  data: MessageUpdateManyMutationInput
  where?: MessageWhereInput
}


/**
 * Message upsert
 */
export type MessageUpsertArgs = {
  /**
   * Select specific fields to fetch from the Message
  **/
  select?: MessageSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: MessageInclude | null
  /**
   * The filter to search for the Message to update in case it exists.
  **/
  where: MessageWhereUniqueInput
  /**
   * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
  **/
  create: MessageCreateInput
  /**
   * In case the Message was found with the provided `where` argument, update it with this data.
  **/
  update: MessageUpdateInput
}


/**
 * Message delete
 */
export type MessageDeleteArgs = {
  /**
   * Select specific fields to fetch from the Message
  **/
  select?: MessageSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: MessageInclude | null
  /**
   * Filter which Message to delete.
  **/
  where: MessageWhereUniqueInput
}


/**
 * Message deleteMany
 */
export type MessageDeleteManyArgs = {
  where?: MessageWhereInput
}


/**
 * Message without action
 */
export type MessageArgs = {
  /**
   * Select specific fields to fetch from the Message
  **/
  select?: MessageSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: MessageInclude | null
}



/**
 * Deep Input Types
 */


export type UserWhereInput = {
  AND?: UserWhereInput | Enumerable<UserWhereInput>
  OR?: UserWhereInput | Enumerable<UserWhereInput>
  NOT?: UserWhereInput | Enumerable<UserWhereInput>
  id?: IntFilter | number
  name?: StringFilter | string
  imageUri?: StringFilter | string
  status?: StringFilter | string
  chatRoomUser?: ChatRoomUserListRelationFilter
  Message?: MessageListRelationFilter
}

export type UserOrderByInput = {
  id?: SortOrder
  name?: SortOrder
  imageUri?: SortOrder
  status?: SortOrder
}

export type UserWhereUniqueInput = {
  id?: number
}

export type ChatRoomUserWhereInput = {
  AND?: ChatRoomUserWhereInput | Enumerable<ChatRoomUserWhereInput>
  OR?: ChatRoomUserWhereInput | Enumerable<ChatRoomUserWhereInput>
  NOT?: ChatRoomUserWhereInput | Enumerable<ChatRoomUserWhereInput>
  id?: IntFilter | number
  userID?: IntFilter | number
  chatRoomID?: IntFilter | number
  user?: UserRelationFilter | UserWhereInput
  ChatRoom?: ChatRoomListRelationFilter
}

export type ChatRoomUserOrderByInput = {
  id?: SortOrder
  userID?: SortOrder
  chatRoomID?: SortOrder
}

export type ChatRoomUserWhereUniqueInput = {
  id?: number
}

export type ChatRoomWhereInput = {
  AND?: ChatRoomWhereInput | Enumerable<ChatRoomWhereInput>
  OR?: ChatRoomWhereInput | Enumerable<ChatRoomWhereInput>
  NOT?: ChatRoomWhereInput | Enumerable<ChatRoomWhereInput>
  id?: IntFilter | number
  chatRoomUsers?: ChatRoomUserRelationFilter | ChatRoomUserWhereInput
  messages?: MessageListRelationFilter
  lastMessageID?: IntFilter | number
}

export type ChatRoomOrderByInput = {
  id?: SortOrder
  lastMessageID?: SortOrder
}

export type ChatRoomWhereUniqueInput = {
  id?: number
}

export type MessageWhereInput = {
  AND?: MessageWhereInput | Enumerable<MessageWhereInput>
  OR?: MessageWhereInput | Enumerable<MessageWhereInput>
  NOT?: MessageWhereInput | Enumerable<MessageWhereInput>
  id?: IntFilter | number
  userID?: IntFilter | number
  content?: StringFilter | string
  createdAt?: StringFilter | string
  chatRoomID?: IntFilter | number
  user?: UserRelationFilter | UserWhereInput
  chatRoom?: ChatRoomRelationFilter | ChatRoomWhereInput
}

export type MessageOrderByInput = {
  id?: SortOrder
  userID?: SortOrder
  content?: SortOrder
  createdAt?: SortOrder
  chatRoomID?: SortOrder
}

export type MessageWhereUniqueInput = {
  id?: number
}

export type UserCreateInput = {
  name: string
  imageUri: string
  status: string
  chatRoomUser?: ChatRoomUserCreateManyWithoutUserInput
  Message?: MessageCreateManyWithoutUserInput
}

export type UserUpdateInput = {
  name?: string | StringFieldUpdateOperationsInput
  imageUri?: string | StringFieldUpdateOperationsInput
  status?: string | StringFieldUpdateOperationsInput
  chatRoomUser?: ChatRoomUserUpdateManyWithoutUserInput
  Message?: MessageUpdateManyWithoutUserInput
}

export type UserUpdateManyMutationInput = {
  name?: string | StringFieldUpdateOperationsInput
  imageUri?: string | StringFieldUpdateOperationsInput
  status?: string | StringFieldUpdateOperationsInput
}

export type ChatRoomUserCreateInput = {
  chatRoomID: number
  user: UserCreateOneWithoutChatRoomUserInput
  ChatRoom?: ChatRoomCreateManyWithoutChatRoomUsersInput
}

export type ChatRoomUserUpdateInput = {
  chatRoomID?: number | IntFieldUpdateOperationsInput
  user?: UserUpdateOneRequiredWithoutChatRoomUserInput
  ChatRoom?: ChatRoomUpdateManyWithoutChatRoomUsersInput
}

export type ChatRoomUserUpdateManyMutationInput = {
  chatRoomID?: number | IntFieldUpdateOperationsInput
}

export type ChatRoomCreateInput = {
  lastMessageID: number
  chatRoomUsers?: ChatRoomUserCreateOneWithoutChatRoomInput
  messages?: MessageCreateManyWithoutChatRoomInput
}

export type ChatRoomUpdateInput = {
  lastMessageID?: number | IntFieldUpdateOperationsInput
  chatRoomUsers?: ChatRoomUserUpdateOneRequiredWithoutChatRoomInput
  messages?: MessageUpdateManyWithoutChatRoomInput
}

export type ChatRoomUpdateManyMutationInput = {
  lastMessageID?: number | IntFieldUpdateOperationsInput
}

export type MessageCreateInput = {
  content: string
  createdAt: string
  user: UserCreateOneWithoutMessageInput
  chatRoom: ChatRoomCreateOneWithoutMessagesInput
}

export type MessageUpdateInput = {
  content?: string | StringFieldUpdateOperationsInput
  createdAt?: string | StringFieldUpdateOperationsInput
  user?: UserUpdateOneRequiredWithoutMessageInput
  chatRoom?: ChatRoomUpdateOneRequiredWithoutMessagesInput
}

export type MessageUpdateManyMutationInput = {
  content?: string | StringFieldUpdateOperationsInput
  createdAt?: string | StringFieldUpdateOperationsInput
}

export type IntFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntFilter
}

export type StringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: string | NestedStringFilter
}

export type ChatRoomUserListRelationFilter = {
  every?: ChatRoomUserWhereInput
  some?: ChatRoomUserWhereInput
  none?: ChatRoomUserWhereInput
}

export type MessageListRelationFilter = {
  every?: MessageWhereInput
  some?: MessageWhereInput
  none?: MessageWhereInput
}

export type UserRelationFilter = {
  is?: UserWhereInput
  isNot?: UserWhereInput
}

export type ChatRoomListRelationFilter = {
  every?: ChatRoomWhereInput
  some?: ChatRoomWhereInput
  none?: ChatRoomWhereInput
}

export type ChatRoomUserRelationFilter = {
  is?: ChatRoomUserWhereInput
  isNot?: ChatRoomUserWhereInput
}

export type ChatRoomRelationFilter = {
  is?: ChatRoomWhereInput
  isNot?: ChatRoomWhereInput
}

export type ChatRoomUserCreateManyWithoutUserInput = {
  create?: ChatRoomUserCreateWithoutUserInput | Enumerable<ChatRoomUserCreateWithoutUserInput>
  connect?: ChatRoomUserWhereUniqueInput | Enumerable<ChatRoomUserWhereUniqueInput>
}

export type MessageCreateManyWithoutUserInput = {
  create?: MessageCreateWithoutUserInput | Enumerable<MessageCreateWithoutUserInput>
  connect?: MessageWhereUniqueInput | Enumerable<MessageWhereUniqueInput>
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type ChatRoomUserUpdateManyWithoutUserInput = {
  create?: ChatRoomUserCreateWithoutUserInput | Enumerable<ChatRoomUserCreateWithoutUserInput>
  connect?: ChatRoomUserWhereUniqueInput | Enumerable<ChatRoomUserWhereUniqueInput>
  set?: ChatRoomUserWhereUniqueInput | Enumerable<ChatRoomUserWhereUniqueInput>
  disconnect?: ChatRoomUserWhereUniqueInput | Enumerable<ChatRoomUserWhereUniqueInput>
  delete?: ChatRoomUserWhereUniqueInput | Enumerable<ChatRoomUserWhereUniqueInput>
  update?: ChatRoomUserUpdateWithWhereUniqueWithoutUserInput | Enumerable<ChatRoomUserUpdateWithWhereUniqueWithoutUserInput>
  updateMany?: ChatRoomUserUpdateManyWithWhereNestedInput | Enumerable<ChatRoomUserUpdateManyWithWhereNestedInput>
  deleteMany?: ChatRoomUserScalarWhereInput | Enumerable<ChatRoomUserScalarWhereInput>
  upsert?: ChatRoomUserUpsertWithWhereUniqueWithoutUserInput | Enumerable<ChatRoomUserUpsertWithWhereUniqueWithoutUserInput>
}

export type MessageUpdateManyWithoutUserInput = {
  create?: MessageCreateWithoutUserInput | Enumerable<MessageCreateWithoutUserInput>
  connect?: MessageWhereUniqueInput | Enumerable<MessageWhereUniqueInput>
  set?: MessageWhereUniqueInput | Enumerable<MessageWhereUniqueInput>
  disconnect?: MessageWhereUniqueInput | Enumerable<MessageWhereUniqueInput>
  delete?: MessageWhereUniqueInput | Enumerable<MessageWhereUniqueInput>
  update?: MessageUpdateWithWhereUniqueWithoutUserInput | Enumerable<MessageUpdateWithWhereUniqueWithoutUserInput>
  updateMany?: MessageUpdateManyWithWhereNestedInput | Enumerable<MessageUpdateManyWithWhereNestedInput>
  deleteMany?: MessageScalarWhereInput | Enumerable<MessageScalarWhereInput>
  upsert?: MessageUpsertWithWhereUniqueWithoutUserInput | Enumerable<MessageUpsertWithWhereUniqueWithoutUserInput>
}

export type UserCreateOneWithoutChatRoomUserInput = {
  create?: UserCreateWithoutChatRoomUserInput
  connect?: UserWhereUniqueInput
}

export type ChatRoomCreateManyWithoutChatRoomUsersInput = {
  create?: ChatRoomCreateWithoutChatRoomUsersInput | Enumerable<ChatRoomCreateWithoutChatRoomUsersInput>
  connect?: ChatRoomWhereUniqueInput | Enumerable<ChatRoomWhereUniqueInput>
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type UserUpdateOneRequiredWithoutChatRoomUserInput = {
  create?: UserCreateWithoutChatRoomUserInput
  connect?: UserWhereUniqueInput
  update?: UserUpdateWithoutChatRoomUserDataInput
  upsert?: UserUpsertWithoutChatRoomUserInput
}

export type ChatRoomUpdateManyWithoutChatRoomUsersInput = {
  create?: ChatRoomCreateWithoutChatRoomUsersInput | Enumerable<ChatRoomCreateWithoutChatRoomUsersInput>
  connect?: ChatRoomWhereUniqueInput | Enumerable<ChatRoomWhereUniqueInput>
  set?: ChatRoomWhereUniqueInput | Enumerable<ChatRoomWhereUniqueInput>
  disconnect?: ChatRoomWhereUniqueInput | Enumerable<ChatRoomWhereUniqueInput>
  delete?: ChatRoomWhereUniqueInput | Enumerable<ChatRoomWhereUniqueInput>
  update?: ChatRoomUpdateWithWhereUniqueWithoutChatRoomUsersInput | Enumerable<ChatRoomUpdateWithWhereUniqueWithoutChatRoomUsersInput>
  updateMany?: ChatRoomUpdateManyWithWhereNestedInput | Enumerable<ChatRoomUpdateManyWithWhereNestedInput>
  deleteMany?: ChatRoomScalarWhereInput | Enumerable<ChatRoomScalarWhereInput>
  upsert?: ChatRoomUpsertWithWhereUniqueWithoutChatRoomUsersInput | Enumerable<ChatRoomUpsertWithWhereUniqueWithoutChatRoomUsersInput>
}

export type ChatRoomUserCreateOneWithoutChatRoomInput = {
  create?: ChatRoomUserCreateWithoutChatRoomInput
  connect?: ChatRoomUserWhereUniqueInput
}

export type MessageCreateManyWithoutChatRoomInput = {
  create?: MessageCreateWithoutChatRoomInput | Enumerable<MessageCreateWithoutChatRoomInput>
  connect?: MessageWhereUniqueInput | Enumerable<MessageWhereUniqueInput>
}

export type ChatRoomUserUpdateOneRequiredWithoutChatRoomInput = {
  create?: ChatRoomUserCreateWithoutChatRoomInput
  connect?: ChatRoomUserWhereUniqueInput
  update?: ChatRoomUserUpdateWithoutChatRoomDataInput
  upsert?: ChatRoomUserUpsertWithoutChatRoomInput
}

export type MessageUpdateManyWithoutChatRoomInput = {
  create?: MessageCreateWithoutChatRoomInput | Enumerable<MessageCreateWithoutChatRoomInput>
  connect?: MessageWhereUniqueInput | Enumerable<MessageWhereUniqueInput>
  set?: MessageWhereUniqueInput | Enumerable<MessageWhereUniqueInput>
  disconnect?: MessageWhereUniqueInput | Enumerable<MessageWhereUniqueInput>
  delete?: MessageWhereUniqueInput | Enumerable<MessageWhereUniqueInput>
  update?: MessageUpdateWithWhereUniqueWithoutChatRoomInput | Enumerable<MessageUpdateWithWhereUniqueWithoutChatRoomInput>
  updateMany?: MessageUpdateManyWithWhereNestedInput | Enumerable<MessageUpdateManyWithWhereNestedInput>
  deleteMany?: MessageScalarWhereInput | Enumerable<MessageScalarWhereInput>
  upsert?: MessageUpsertWithWhereUniqueWithoutChatRoomInput | Enumerable<MessageUpsertWithWhereUniqueWithoutChatRoomInput>
}

export type UserCreateOneWithoutMessageInput = {
  create?: UserCreateWithoutMessageInput
  connect?: UserWhereUniqueInput
}

export type ChatRoomCreateOneWithoutMessagesInput = {
  create?: ChatRoomCreateWithoutMessagesInput
  connect?: ChatRoomWhereUniqueInput
}

export type UserUpdateOneRequiredWithoutMessageInput = {
  create?: UserCreateWithoutMessageInput
  connect?: UserWhereUniqueInput
  update?: UserUpdateWithoutMessageDataInput
  upsert?: UserUpsertWithoutMessageInput
}

export type ChatRoomUpdateOneRequiredWithoutMessagesInput = {
  create?: ChatRoomCreateWithoutMessagesInput
  connect?: ChatRoomWhereUniqueInput
  update?: ChatRoomUpdateWithoutMessagesDataInput
  upsert?: ChatRoomUpsertWithoutMessagesInput
}

export type NestedIntFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntFilter
}

export type NestedStringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: string | NestedStringFilter
}

export type ChatRoomUserCreateWithoutUserInput = {
  chatRoomID: number
  ChatRoom?: ChatRoomCreateManyWithoutChatRoomUsersInput
}

export type MessageCreateWithoutUserInput = {
  content: string
  createdAt: string
  chatRoom: ChatRoomCreateOneWithoutMessagesInput
}

export type ChatRoomUserUpdateWithWhereUniqueWithoutUserInput = {
  where: ChatRoomUserWhereUniqueInput
  data: ChatRoomUserUpdateWithoutUserDataInput
}

export type ChatRoomUserUpdateManyWithWhereNestedInput = {
  where: ChatRoomUserScalarWhereInput
  data: ChatRoomUserUpdateManyDataInput
}

export type ChatRoomUserScalarWhereInput = {
  AND?: ChatRoomUserScalarWhereInput | Enumerable<ChatRoomUserScalarWhereInput>
  OR?: ChatRoomUserScalarWhereInput | Enumerable<ChatRoomUserScalarWhereInput>
  NOT?: ChatRoomUserScalarWhereInput | Enumerable<ChatRoomUserScalarWhereInput>
  id?: IntFilter | number
  userID?: IntFilter | number
  chatRoomID?: IntFilter | number
}

export type ChatRoomUserUpsertWithWhereUniqueWithoutUserInput = {
  where: ChatRoomUserWhereUniqueInput
  update: ChatRoomUserUpdateWithoutUserDataInput
  create: ChatRoomUserCreateWithoutUserInput
}

export type MessageUpdateWithWhereUniqueWithoutUserInput = {
  where: MessageWhereUniqueInput
  data: MessageUpdateWithoutUserDataInput
}

export type MessageUpdateManyWithWhereNestedInput = {
  where: MessageScalarWhereInput
  data: MessageUpdateManyDataInput
}

export type MessageScalarWhereInput = {
  AND?: MessageScalarWhereInput | Enumerable<MessageScalarWhereInput>
  OR?: MessageScalarWhereInput | Enumerable<MessageScalarWhereInput>
  NOT?: MessageScalarWhereInput | Enumerable<MessageScalarWhereInput>
  id?: IntFilter | number
  userID?: IntFilter | number
  content?: StringFilter | string
  createdAt?: StringFilter | string
  chatRoomID?: IntFilter | number
}

export type MessageUpsertWithWhereUniqueWithoutUserInput = {
  where: MessageWhereUniqueInput
  update: MessageUpdateWithoutUserDataInput
  create: MessageCreateWithoutUserInput
}

export type UserCreateWithoutChatRoomUserInput = {
  name: string
  imageUri: string
  status: string
  Message?: MessageCreateManyWithoutUserInput
}

export type ChatRoomCreateWithoutChatRoomUsersInput = {
  lastMessageID: number
  messages?: MessageCreateManyWithoutChatRoomInput
}

export type UserUpdateWithoutChatRoomUserDataInput = {
  name?: string | StringFieldUpdateOperationsInput
  imageUri?: string | StringFieldUpdateOperationsInput
  status?: string | StringFieldUpdateOperationsInput
  Message?: MessageUpdateManyWithoutUserInput
}

export type UserUpsertWithoutChatRoomUserInput = {
  update: UserUpdateWithoutChatRoomUserDataInput
  create: UserCreateWithoutChatRoomUserInput
}

export type ChatRoomUpdateWithWhereUniqueWithoutChatRoomUsersInput = {
  where: ChatRoomWhereUniqueInput
  data: ChatRoomUpdateWithoutChatRoomUsersDataInput
}

export type ChatRoomUpdateManyWithWhereNestedInput = {
  where: ChatRoomScalarWhereInput
  data: ChatRoomUpdateManyDataInput
}

export type ChatRoomScalarWhereInput = {
  AND?: ChatRoomScalarWhereInput | Enumerable<ChatRoomScalarWhereInput>
  OR?: ChatRoomScalarWhereInput | Enumerable<ChatRoomScalarWhereInput>
  NOT?: ChatRoomScalarWhereInput | Enumerable<ChatRoomScalarWhereInput>
  id?: IntFilter | number
  lastMessageID?: IntFilter | number
}

export type ChatRoomUpsertWithWhereUniqueWithoutChatRoomUsersInput = {
  where: ChatRoomWhereUniqueInput
  update: ChatRoomUpdateWithoutChatRoomUsersDataInput
  create: ChatRoomCreateWithoutChatRoomUsersInput
}

export type ChatRoomUserCreateWithoutChatRoomInput = {
  chatRoomID: number
  user: UserCreateOneWithoutChatRoomUserInput
}

export type MessageCreateWithoutChatRoomInput = {
  content: string
  createdAt: string
  user: UserCreateOneWithoutMessageInput
}

export type ChatRoomUserUpdateWithoutChatRoomDataInput = {
  chatRoomID?: number | IntFieldUpdateOperationsInput
  user?: UserUpdateOneRequiredWithoutChatRoomUserInput
}

export type ChatRoomUserUpsertWithoutChatRoomInput = {
  update: ChatRoomUserUpdateWithoutChatRoomDataInput
  create: ChatRoomUserCreateWithoutChatRoomInput
}

export type MessageUpdateWithWhereUniqueWithoutChatRoomInput = {
  where: MessageWhereUniqueInput
  data: MessageUpdateWithoutChatRoomDataInput
}

export type MessageUpsertWithWhereUniqueWithoutChatRoomInput = {
  where: MessageWhereUniqueInput
  update: MessageUpdateWithoutChatRoomDataInput
  create: MessageCreateWithoutChatRoomInput
}

export type UserCreateWithoutMessageInput = {
  name: string
  imageUri: string
  status: string
  chatRoomUser?: ChatRoomUserCreateManyWithoutUserInput
}

export type ChatRoomCreateWithoutMessagesInput = {
  lastMessageID: number
  chatRoomUsers?: ChatRoomUserCreateOneWithoutChatRoomInput
}

export type UserUpdateWithoutMessageDataInput = {
  name?: string | StringFieldUpdateOperationsInput
  imageUri?: string | StringFieldUpdateOperationsInput
  status?: string | StringFieldUpdateOperationsInput
  chatRoomUser?: ChatRoomUserUpdateManyWithoutUserInput
}

export type UserUpsertWithoutMessageInput = {
  update: UserUpdateWithoutMessageDataInput
  create: UserCreateWithoutMessageInput
}

export type ChatRoomUpdateWithoutMessagesDataInput = {
  lastMessageID?: number | IntFieldUpdateOperationsInput
  chatRoomUsers?: ChatRoomUserUpdateOneRequiredWithoutChatRoomInput
}

export type ChatRoomUpsertWithoutMessagesInput = {
  update: ChatRoomUpdateWithoutMessagesDataInput
  create: ChatRoomCreateWithoutMessagesInput
}

export type ChatRoomUserUpdateWithoutUserDataInput = {
  chatRoomID?: number | IntFieldUpdateOperationsInput
  ChatRoom?: ChatRoomUpdateManyWithoutChatRoomUsersInput
}

export type ChatRoomUserUpdateManyDataInput = {
  chatRoomID?: number | IntFieldUpdateOperationsInput
}

export type MessageUpdateWithoutUserDataInput = {
  content?: string | StringFieldUpdateOperationsInput
  createdAt?: string | StringFieldUpdateOperationsInput
  chatRoom?: ChatRoomUpdateOneRequiredWithoutMessagesInput
}

export type MessageUpdateManyDataInput = {
  content?: string | StringFieldUpdateOperationsInput
  createdAt?: string | StringFieldUpdateOperationsInput
}

export type ChatRoomUpdateWithoutChatRoomUsersDataInput = {
  lastMessageID?: number | IntFieldUpdateOperationsInput
  messages?: MessageUpdateManyWithoutChatRoomInput
}

export type ChatRoomUpdateManyDataInput = {
  lastMessageID?: number | IntFieldUpdateOperationsInput
}

export type MessageUpdateWithoutChatRoomDataInput = {
  content?: string | StringFieldUpdateOperationsInput
  createdAt?: string | StringFieldUpdateOperationsInput
  user?: UserUpdateOneRequiredWithoutMessageInput
}

/**
 * Batch Payload for updateMany & deleteMany
 */

export type BatchPayload = {
  count: number
}

/**
 * DMMF
 */
export declare const dmmf: DMMF.Document;
export {};
